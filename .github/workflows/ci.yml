name: ♟️ ci

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [ opened, reopened, synchronize ]

env:
  # This should be the same as `command_line` under `[run]` in `.coveragerc`
  test-command-line: -m unittest discover -v -s ./test -p test_*.py
  # This should be the same as `fail_under` under `[report]` in `.coveragerc`
  coverage-minimum-percent: 0
  # Directories containing files to format and lint
  source-dirs: opex scripts test

jobs:
  check-tests:
    name: 🧪 check-tests / ${{ matrix.name }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        include:
         - { name: 🍏 macos, os: macos-latest, python-version: 3.9 }
         - { name: 🖼️ windows, os: windows-latest, python-version: 3.9 }
         - { name: 🐧 ubuntu, os: ubuntu-latest, python-version: 3.9 }

    steps:
    # Setup
    - name: 🛒 Checkout repo
      uses: actions/checkout@v2
    - name: 🐍 Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: 🛠️ Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    # Run tests
    - name: ⚗️ Run unittest
      run: |
        python ${{ env.test-command-line }}

  check-format:
    name: 🥼 check-format / 🐧 ubuntu
    runs-on: ubuntu-latest

    steps:
    # Setup
    - name: 🛒 Checkout repo
      uses: actions/checkout@v2
    - name: 🐍 Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - name: 🛠️ Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements/requirements-style.txt

    # Formatting
    - name: 🧹 Format with yapf
      run: |
        yapf -d -r -p -vv ${{ env.source-dirs }}

    # Linting
    - name: ✨ Lint with pylint
      run: |
        pylint -v ${{ env.source-dirs }}

  check-coverage:
    name: 🔬 check-coverage / 🐧 ubuntu
    runs-on: ubuntu-latest

    steps:
    # Setup
    - name: 🛒 Checkout repo
      uses: actions/checkout@v2
    - name: 🐍 Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - name: 🛠️ Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements/requirements-coverage.txt

    # Test with coverage
    - name: ☂️ Run unittest with coverage
      run: |
        coverage run ${{ env.test-command-line }}

    - name: 🖨️ Generate coverage xml
      # Override default `fail_under`
      run: |
        coverage xml --fail-under 0

    - name: 🐒 Comment coverage on PR
      if: ${{ github.event_name == 'pull_request' }}
      uses: 5monkeys/cobertura-action@v7
      with:
        path: coverage.xml
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        skip_covered: false
        show_line: true
        show_branch: true
        show_missing: true
        minimum_coverage: ${{ env.coverage-minimum-percent }}

    - name: 📯 Upload coverage
      uses: actions/upload-artifact@v2
      with:
        name: coverage
        path: coverage.xml

    - name: 🛂 Check minimum coverage
      run: |
        coverage report --fail-under ${{ env.coverage-minimum-percent }}
