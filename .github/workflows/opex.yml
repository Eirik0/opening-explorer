name: opex

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  run-tests:
    strategy:
      matrix:
        # os: [ ubuntu-latest, macos-latest, windows-latest ]
        os: [ ubuntu-latest ]
        python-version: [ 3.x ]

    env:
      # This should be the same as `command_line` under `[run]` in `.coveragerc`
      test-command-line: -m unittest discover -v -s ./test -p test_*.py
      # Only run on ubuntu-latest / python 3.x
      coverage-should-run: >
        ${{ matrix.os }} == ubuntu-latest && ${{ matrix.python-version }} == 3.x
      # This should be the same as `fail_under` under `[report]` in `.coveragerc`
      coverage-minimum-percent: 40

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Lint with pylint
      run: |
        pylint -v opex test
    # - name: Run unittest
    #   if: ! ${{ env.coverage-should-run }}
    #   run: |
    #     python ${{ env.test.command-line }}
    - name: Run unittest with coverage
      if: ${{ env.coverage-should-run }}
      run: |
        coverage run ${{ env.test.command-line }}
    - name: Generate coverage xml
      if: ${{ env.coverage-should-run }}
      run: |
        coverage xml --fail-under ${{ env.coverage-minimum-percent }}
    - name: Comment coverage on PR
      if: ${{ always() }} && ${{ env.coverage-should-run }}
      uses: 5monkeys/cobertura-action@v7
      with:
        path: coverage.xml
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        skip_covered: false
        show_line: true
        show_branch: true
        show_missing: true
        minimum_coverage: ${{ env.coverage-minimum-percent }}
