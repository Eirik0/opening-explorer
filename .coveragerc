# .coveragerc to control coverage.py

# Comments for relevant and interesting options have been copied from:
# https://coverage.readthedocs.io/en/coverage-5.4/config.html


# These values are generally used when running product code, though some apply
# to more than one command.
[run]

# Whether to measure branch coverage in addition to statement coverage.
branch = True

# The command-line to run your program. This will be used if you run
# `coverage run`  with no further arguments. Coverage.py options cannot be
# specified here, other than `-m` to indicate the module to run.
command_line = -m unittest discover -v -s ./test -p test_*.py

# The name of a strategy for setting the dynamic context during execution. The
# `dynamic_context` setting has only one option now. Set it to `test_function`
# to start a new dynamic context for every test function. Each test function
# you run will be considered a separate dynamic context, and coverage data will
# be segregated for each. A test function is any function whose name starts
# with “test”.
#dynamic_context = test_function

# A list of file name patterns, the files to include in measurement or
# reporting. Ignored if `source` is set.
#include =

# A list of file name patterns, the files to leave out of measurement or
# reporting.
omit =
    .venv/*
    scripts/

# A list of packages or directories, the source to measure during execution. If
# set, include is ignored.
source =
    .

# A list of packages, the source to measure during execution. Operates the same
# as `source`, but only names packages, for resolving ambiguities between
# packages and directories.
#source_pkgs =

# The name concurrency libraries in use by the product code. If your program
# uses "multiprocessing", "gevent", "greenlet", or "eventlet", you must name
# that library in this option, or coverage.py will produce very wrong results.
#concurrency =
#    thread


# Values common to many kinds of reporting.
[report]

# A list of regular expressions. Any line of your source code that matches one
# of these regexes is excluded from being reported as missing. If you use this
# option, you are replacing all the exclude regexes, so you’ll need to also
# supply the “pragma: no cover” regex if you still want to use it.
#exclude_lines =

# A target coverage percentage. If the total coverage measurement is under this
# value, then exit with a status code of 2. If you specify a non-integral value,
# you must also set `[report] precision` properly to make use of the decimal
# places. A setting of 100 will fail any value under 100, regardless of the
# number of decimal places of precision.
fail_under = 0

# A list of regular expressions. Any line of code that matches one of these
# regexes is excused from being reported as a partial branch. If you use this
# option, you are replacing all the partial branch regexes so you’ll need to
# also supply the “pragma: no branch” regex if you still want to use it.
#partial_branches =

# The number of digits after the decimal point to display for reported coverage
# percentages. The default is 0, displaying for example “87%”. A value of 2
# will display percentages like “87.32%”. This setting also affects the
# interpretation of the `fail_under` setting.
#precision = 0

# When running a summary report, show missing lines.
show_missing = True

# Sort the text report by the named column. Allowed values are “Name”, “Stmts”,
# “Miss”, “Branch”, “BrPart”, or “Cover”.
#sort = "Name"


# Values particular to HTML reporting. The values in the [report] section also apply
# to HTML output, where appropriate.
[html]

# Should the HTML report include an indication on each line of which contexts
# executed the line.
show_contexts = True
